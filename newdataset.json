[{"raw_code": "\n    fn main() {\n        let mut buffer = [0; 10];  // Increased buffer size\n        let user_input = \"user_input_placeholder\";\n        buffer[10] = 1;  // Accessing out-of-bounds index\n    }\n    ", "binary_vulnerability_vector": [0, 0, 0, 0, 0]}, {"raw_code": "\n    fn main() {\n        let x: u8 = 255;\n        let y: u8 = 1;\n        let z = x + y;  // Integer overflow: result is truncated to 0\n        println!(\"{}\", z);\n    }\n    ", "binary_vulnerability_vector": [0, 0, 0, 0, 0]}, {"raw_code": "\n    fn main() {\n        let secret_password = \"my_secret_password\";\n        let user_input = \"user_input_placeholder\";\n        println!(\"{}\", user_input);\n    }\n    ", "binary_vulnerability_vector": [0, 0, 0, 0, 0]}, {"raw_code": "\n    fn main() {\n        let x: u8 = 255;\n        let y: u8 = 1;\n        let z = x + y;  // Integer overflow: result is truncated to 0\n        println!(\"{}\", z);\n    }\n    ", "binary_vulnerability_vector": [0, 0, 0, 0, 0]}, {"raw_code": "\n    fn main() {\n        let secret_password = \"my_secret_password\";\n        let user_input = \"user_input_placeholder\";\n        println!(\"{}\", user_input);\n    }\n    ", "binary_vulnerability_vector": [0, 0, 0, 0, 0]}, {"raw_code": "\n    fn main() {\n        let mut v = vec![];  // Vector with no elements\n        for _ in 0..10 {\n            v.push(\"memory_leak_placeholder\".to_string());\n        }\n        // Memory leak: `v` is not deallocated, causing a memory leak\n    }\n    ", "binary_vulnerability_vector": [0, 0, 1, 0, 0]}, {"raw_code": "\n    fn main() {\n        let mut v = vec![\"use_after_free_placeholder\".to_string()];  // Vector with one element\n        let ptr = v.as_mut_ptr();  // Get raw pointer\n        v.clear();  // Deallocate vector\n        unsafe {\n            println!(\"{}\", *ptr);  // Use-after-free: accessing memory after deallocation\n        }\n    }\n    ", "binary_vulnerability_vector": [0, 0, 0, 1, 0]}, {"raw_code": "\n    fn main() {\n        let mut v = vec![];  // Vector with no elements\n        for _ in 0..10 {\n            v.push(\"memory_leak_placeholder\".to_string());\n        }\n        // Memory leak: `v` is not deallocated, causing a memory leak\n    }\n    ", "binary_vulnerability_vector": [0, 0, 1, 0, 0]}, {"raw_code": "\n    fn main() {\n        let mut v = vec![];  // Vector with no elements\n        for _ in 0..10 {\n            v.push(\"memory_leak_placeholder\".to_string());\n        }\n        // Memory leak: `v` is not deallocated, causing a memory leak\n    }\n    ", "binary_vulnerability_vector": [0, 0, 1, 0, 0]}, {"raw_code": "\n    fn main() {\n        let mut buffer = [0; 10];  // Increased buffer size\n        let user_input = \"user_input_placeholder\";\n        buffer[10] = 1;  // Accessing out-of-bounds index\n    }\n    ", "binary_vulnerability_vector": [0, 0, 0, 0, 0]}]